// This file is generated by kconfig_compiler from kwordquiz.kcfg.
// All changes you do to this file will be lost.
#ifndef PREFS_H
#define PREFS_H

#include <QString>
#include <QStringList>
#include <QFont>
#include <QColor>
#include <QPoint>
#include <QSize>

//#include <kconfigskeleton.h>
//#include <kdebug.h>

//#include <kglobalsettings.h>
class Prefs /*: public KConfigSkeleton*/
{
  public:
    class EnumStartSession
    {
      public:
      enum type { Editor, Flashcard, MultipleChoice, QA, COUNT };
    };
    class EnumPrintStyle
    {
      public:
      enum type { List, Exam, Flashcard, COUNT };
    };

    static Prefs *self();
    ~Prefs();

    /**
      Set Is this the first time KWordQuiz is run?
    */
    static
    void setFirstRun( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "FirstRun" ) ))
        self()->mFirstRun = v;
    }

    /**
      Get Is this the first time KWordQuiz is run?
    */
    static
    bool firstRun()
    {
      return self()->mFirstRun;
    }

    /**
      Set Toggle display of the search bar.
    */
    static
    void setShowSearch( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ShowSearch" ) ))
        self()->mShowSearch = v;
    }

    /**
      Get Toggle display of the search bar.
    */
    static
    bool showSearch()
    {
#ifdef Q_WS_MAC
        return false;
#else
        return self()->mShowSearch;
#endif
    }

    /**
      Set Type of session to use when opening files
    */
    static
    void setStartSession( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "StartSession" ) ))
        self()->mStartSession = v;
    }

    /**
      Get Type of session to use when opening files
    */
    static
    int startSession()
    {
      return self()->mStartSession;
    }

    /**
      Set Type of printout to generate
    */
    static
    void setPrintStyle( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PrintStyle" ) ))
        self()->mPrintStyle = v;
    }

    /**
      Get Type of printout to generate
    */
    static
    int printStyle()
    {
      return self()->mPrintStyle;
    }

    /**
      Set Titles for column 1
    */
    static
    void setColumnTitles1( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ColumnTitles1" ) ))
        self()->mColumnTitles1 = v;
    }

    /**
      Get Titles for column 1
    */
    static
    QStringList columnTitles1()
    {
      return self()->mColumnTitles1;
    }

    /**
      Set Titles for column 2
    */
    static
    void setColumnTitles2( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ColumnTitles2" ) ))
        self()->mColumnTitles2 = v;
    }

    /**
      Get Titles for column 2
    */
    static
    QStringList columnTitles2()
    {
      return self()->mColumnTitles2;
    }

    /**
      Set Font used in the editor
    */
    static
    void setEditorFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "EditorFont" ) ))
        self()->mEditorFont = v;
    }

    /**
      Get Font used in the editor
    */
    static
    QFont editorFont()
    {
      return self()->mEditorFont;
    }

    /**
      Set If Fill-in-the-blank should be enabled
    */
    static
    void setEnableBlanks( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "EnableBlanks" ) ))
        self()->mEnableBlanks = v;
    }

    /**
      Get If Fill-in-the-blank should be enabled
    */
    static
    bool enableBlanks()
    {
      return self()->mEnableBlanks;
    }

    /**
      Set Direction the Enter key moves in the editor
    */
    static
    void setEnterMove( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "EnterMove" ) ))
        self()->mEnterMove = v;
    }

    /**
      Get Direction the Enter key moves in the editor
    */
    static
    int enterMove()
    {
      return self()->mEnterMove;
    }

    /**
      Set Characters for the special character toolbar
    */
    static
    void setSpecialCharacters( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "SpecialCharacters" ) ))
        self()->mSpecialCharacters = v;
    }

    /**
      Get Characters for the special character toolbar
    */
    static
    QString specialCharacters()
    {
      return self()->mSpecialCharacters;
    }


    static
    void setClearAll(bool v)
    {
        if (!self()->isImmutable( QString::fromLatin1 ( "ClearAll" ) ))
          self()->mClearAll = v;
    }

    static
    bool clearAll()
    {
        return self()->mClearAll;
    }

    static
    void setClearText(bool v)
    {
        if (!self()->isImmutable( QString::fromLatin1 ( "ClearText" ) ))
          self()->mClearText = v;
    }

    static
    bool clearText()
    {
        return self()->mClearText;
    }

    static
    void setClearImageLink(bool v)
    {
        if (!self()->isImmutable( QString::fromLatin1 ( "ClearImageLink" ) ))
          self()->mClearImageLink = v;
    }

    static
    bool clearImageLink()
    {
        return self()->mClearImageLink;
    }

    static
    void setClearSoundLink(bool v)
    {
        if (!self()->isImmutable( QString::fromLatin1 ( "ClearSoundLink" ) ))
          self()->mClearSoundLink = v;
    }

    static
    bool clearSoundLink()
    {
        return self()->mClearSoundLink;
    }


    /**
      Set Automatically check selected answer in multiple choice
    */
    static
    void setAutoCheck( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "AutoCheck" ) ))
        self()->mAutoCheck = v;
    }

    /**
      Get Automatically check selected answer in multiple choice
    */
    static
    bool autoCheck()
    {
      return self()->mAutoCheck;
    }

    /**
      Set Automatically flip flashcard
    */
    static
    void setAutoFlip( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "AutoFlip" ) ))
        self()->mAutoFlip = v;
    }

    /**
      Get Automatically flip flashcard
    */
    static
    bool autoFlip()
    {
      return self()->mAutoFlip;
    }

    /**
      Set Time delay for flipping flashcard
    */
    static
    void setFlipDelay( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "FlipDelay" ) ))
        self()->mFlipDelay = v;
    }

    /**
      Get Time delay for flipping flashcard
    */
    static
    int flipDelay()
    {
      return self()->mFlipDelay;
    }

    /**
      Set Treat use of hint as error
    */
    static
    void setHintError( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "HintError" ) ))
        self()->mHintError = v;
    }

    /**
      Get Treat use of hint as error
    */
    static
    bool hintError()
    {
      return self()->mHintError;
    }

    /**
      Set Count flashcard as correct or error
    */
    static
    void setKeepDiscard( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "KeepDiscard" ) ))
        self()->mKeepDiscard = v;
    }

    /**
      Get Count flashcard as correct or error
    */
    static
    int keepDiscard()
    {
      return self()->mKeepDiscard;
    }

    /**
      Set Quiz mode
    */
    static
    void setMode( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "Mode" ) ))
        self()->mMode = v;
    }

    /**
      Get Quiz mode
    */
    static
    int mode()
    {
      return self()->mMode;
    }

    /**
      Set Show score as percentage
    */
    static
    void setPercent( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "Percent" ) ))
        self()->mPercent = v;
    }

    /**
      Get Show score as percentage
    */
    static
    bool percent()
    {
      return self()->mPercent;
    }

    /**
      Set Font used for front of flashcard
    */
    static
    void setFrontFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "FrontFont" ) ))
        self()->mFrontFont = v;
    }

    /**
      Get Font used for front of flashcard
    */
    static
    QFont frontFont()
    {
      return self()->mFrontFont;
    }

    /**
      Set Color used for text on front of flashcard
    */
    static
    void setFrontTextColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "FrontTextColor" ) ))
        self()->mFrontTextColor = v;
    }

    /**
      Get Color used for text on front of flashcard
    */
    static
    QColor frontTextColor()
    {
      return self()->mFrontTextColor;
    }

    /**
      Set Color used for front of flashcard
    */
    static
    void setFrontCardColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "FrontCardColor" ) ))
        self()->mFrontCardColor = v;
    }

    /**
      Get Color used for front of flashcard
    */
    static
    QColor frontCardColor()
    {
      return self()->mFrontCardColor;
    }

    /**
      Set Color used for frame on front of flashcard
    */
    static
    void setFrontFrameColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "FrontFrameColor" ) ))
        self()->mFrontFrameColor = v;
    }

    /**
      Get Color used for frame on front of flashcard
    */
    static
    QColor frontFrameColor()
    {
      return self()->mFrontFrameColor;
    }

    /**
      Set Font used for back of flashcard
    */
    static
    void setBackFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "BackFont" ) ))
        self()->mBackFont = v;
    }

    /**
      Get Font used for back of flashcard
    */
    static
    QFont backFont()
    {
      return self()->mBackFont;
    }

    /**
      Set Color used for text on back of flashcard
    */
    static
    void setBackTextColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "BackTextColor" ) ))
        self()->mBackTextColor = v;
    }

    /**
      Get Color used for text on back of flashcard
    */
    static
    QColor backTextColor()
    {
      return self()->mBackTextColor;
    }

    /**
      Set Color used for back of flashcard
    */
    static
    void setBackCardColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "BackCardColor" ) ))
        self()->mBackCardColor = v;
    }

    /**
      Get Color used for back of flashcard
    */
    static
    QColor backCardColor()
    {
      return self()->mBackCardColor;
    }

    /**
      Set Color used for frame on back of flashcard
    */
    static
    void setBackFrameColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "BackFrameColor" ) ))
        self()->mBackFrameColor = v;
    }

    /**
      Get Color used for frame on back of flashcard
    */
    static
    QColor backFrameColor()
    {
      return self()->mBackFrameColor;
    }

    /**
      Set The Providers path for KWordQuiz
    */
    static
    void setProvidersUrl( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ProvidersUrl" ) ))
        self()->mProvidersUrl = v;
    }

    /**
      Get The Providers path for KWordQuiz
    */
    static
    QString providersUrl()
    {
      return self()->mProvidersUrl;
    }

    /**
      Set The command used to start a downloaded vocabulary
    */
    static
    void setInstallationCommand( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "InstallationCommand" ) ))
        self()->mInstallationCommand = v;
    }

    /**
      Get The command used to start a downloaded vocabulary
    */
    static
    QString installationCommand()
    {
      return self()->mInstallationCommand;
    }

    /**
      Set The folder where downloaded vocabularies are saved by default (relative to $HOME)
    */
    static
    void setInstallPath( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "InstallPath" ) ))
        self()->mInstallPath = v;
    }

    /**
      Get The folder where downloaded vocabularies are saved by default (relative to $HOME)
    */
    static
    QString installPath()
    {
      return self()->mInstallPath;
    }

    /**
      Main window state
    */
    static void setMainWindowState( const QByteArray & v )
    {
      self()->mMainWindowState = v;
    }

    /**
      Main window state
    */
    static QByteArray mainWindowState()
    {
      return self()->mMainWindowState;
    }

    /**
      Main window size
    */
    static void setMainWindowSize( const QSize & v )
    {
      self()->mMainWindowSize = v;
    }

    /**
      Main window size
    */
    static QSize mainWindowSize()
    {
      return self()->mMainWindowSize;
    }

    /**
      Main window position
    */
    static void setMainWindowPosition( const QPoint & v )
    {
      self()->mMainWindowPosition = v;
    }

    /**
      Main window position
    */
    static QPoint mainWindowPosition()
    {
      return self()->mMainWindowPosition;
    }

    /**
      Set Toggle display of the statusbar.
    */
    static
    void setShowStatusbar( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ShowStatusbar" ) ))
        self()->mShowStatusbar = v;
    }

    /**
      Get Toggle display of the statusbar.
    */
    static
    bool showStatusbar()
    {
      return self()->mShowStatusbar;
    }

    /**
      Set Recent Files
    */
    static
    void setRecentFiles( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "RecentFiles" ) ))
        self()->mRecentFiles = v;
    }

    /**
      Get RecentFiles
    */
    static
    QStringList recentFiles()
    {
      return self()->mRecentFiles;
    }

    /**
      Set The Last Open Directory
    */
    static
    void setLastOpenDir( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "LastOpenDir" ) ))
        self()->mLastOpenDir = v;
    }

    /**
      Get The Last Open Directory
    */
    static
    QString lastOpenDir()
    {
      return self()->mLastOpenDir;
    }

    /**
      Set The Last Image Directory
    */
    static
    void setLastImageDir( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "LastImageDir" ) ))
        self()->mLastImageDir = v;
    }

    /**
      Get The Last Image Directory
    */
    static
    QString lastImageDir()
    {
      return self()->mLastImageDir;
    }

    /**
      Set The Last Sound Directory
    */
    static
    void setLastSoundDir( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "LastSoundDir" ) ))
        self()->mLastSoundDir = v;
    }

    /**
      Get The Last Sound Directory
    */
    static
    QString lastSoundDir()
    {
      return self()->mLastSoundDir;
    }

    void writePrefs();

  protected:
    Prefs();
    friend class PrefsHelper;

    bool isImmutable(const QString &) { return false;}

    // General
    bool mFirstRun;
    bool mShowSearch;
    int mStartSession;
    int mPrintStyle;

    // Editor
    QStringList mColumnTitles1;
    QStringList mColumnTitles2;
    QFont mEditorFont;
    bool mEnableBlanks;
    int mEnterMove;
    QString mSpecialCharacters;
    bool mClearAll;
    bool mClearText;
    bool mClearImageLink;
    bool mClearSoundLink;

    // Quiz
    bool mAutoCheck;
    bool mAutoFlip;
    int mFlipDelay;
    bool mHintError;
    int mKeepDiscard;
    int mMode;
    bool mPercent;

    // FlashCard
    QFont mFrontFont;
    QColor mFrontTextColor;
    QColor mFrontCardColor;
    QColor mFrontFrameColor;
    QFont mBackFont;
    QColor mBackTextColor;
    QColor mBackCardColor;
    QColor mBackFrameColor;

    // KNewStuff
    QString mProvidersUrl;
    QString mInstallationCommand;
    QString mInstallPath;

    QByteArray mMainWindowState;
    QSize mMainWindowSize;
    QPoint mMainWindowPosition;
    bool mShowStatusbar;
    QStringList mRecentFiles;
    QString mLastOpenDir;
    QString mLastImageDir;
    QString mLastSoundDir;
  private:
};

#endif

